class JigglyMitigator{constructor(a,b,d=null){this.options={strokeBufferSize:8,lineDistanceThreshold:.15,longLineDistanceThreshold:.3,distanceThreshold:10,fixedDigit:1};if(null!==d)for(let c in d)null!==d[c]&&(this.options[c]=d[c]);this.lineDistanceThreshold2=this.options.lineDistanceThreshold*this.options.lineDistanceThreshold;this.longLineDistanceThreshold2=this.options.longLineDistanceThreshold*this.options.longLineDistanceThreshold;this.distanceThreshold2=this.options.distanceThreshold*this.options.distanceThreshold;
this.strokeBuffer=[{x:a,y:b}];this.additionalPoints=[];this.temporaryPoints=[];a=this.getFixedValue(a);b=this.getFixedValue(b);this.strokePath="M"+a+" "+b+" L"+a+" "+b;this.temporaryPath=this.additionalPath=""}appendToBuffer(a,b){for(this.strokeBuffer.push({x:a,y:b});this.strokeBuffer.length>this.options.strokeBufferSize;)this.strokeBuffer.shift();this.updateSvgPath()}getAveragePoint(a){const b=this.strokeBuffer.length;if(1===b%2||b>=this.options.strokeBufferSize){let d=0,c=0,e=0;for(;a<b;a++){const f=
this.strokeBuffer[a];d+=f.x;c+=f.y;e++}return{x:d/e,y:c/e}}return null}updateSvgPath(){var a=this.getAveragePoint(0);if(a){this.additionalPoints.push({x:a.x,y:a.y});this.additionalPoints=this.toSimple(this.additionalPoints);if(10<=this.additionalPoints.length)for(a=0;a<this.additionalPoints.length-10;a++){var b=this.additionalPoints[0];this.strokePath+=" L"+this.getFixedValue(b.x)+" "+this.getFixedValue(b.y);this.additionalPoints.shift()}this.additionalPath="";for(a=0;a<this.additionalPoints.length;a++)this.additionalPath+=
" L"+this.getFixedValue(this.additionalPoints[a].x)+" "+this.getFixedValue(this.additionalPoints[a].y);this.temporaryPoints.length=0;for(b=2;b<this.strokeBuffer.length;b+=2)a=this.getAveragePoint(b),this.temporaryPoints.push({x:a.x,y:a.y});this.temporaryPath="";for(a=0;a<this.temporaryPoints.length;a++)this.temporaryPath+=" L"+this.getFixedValue(this.temporaryPoints[a].x)+" "+this.getFixedValue(this.temporaryPoints[a].y);return!0}return!1}toSimple(a){for(let e=2;e<a.length-1;e++){var b=a[e-2],d=a[e-
1],c=a[e];const f=a[e+1];b=this.getLinePointDistance2(d.x,d.y,b.x,b.y,c.x,c.y);const g=this.getLinePointDistance2(c.x,c.y,d.x,d.y,f.x,f.y);g<=this.lineDistanceThreshold2&&g<b?a.splice(e--,1):(d=this.getDistance2(d.x,d.y,c.x,c.y),c=this.getDistance2(c.x,c.y,f.x,f.y),d>=this.distanceThreshold2&&c>=this.distanceThreshold2&&g<=this.longLineDistanceThreshold2&&g<b&&a.splice(e--,1))}return a}getPath(){return this.strokePath+this.additionalPath+this.temporaryPath}getFixedValue(a){return parseFloat(a.toFixed(this.options.fixedDigit))}getDistance2(a,
b,d,c){return(d-a)*(d-a)+(c-b)*(c-b)}getLinePointDistance2(a,b,d,c,e,f){const g=(f-c)*(f-c)+(e-d)*(e-d);if(0===g)return 0;a=Math.abs((f-c)*a-(e-d)*b+e*c-f*d);return a*a/g}};
